# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # with privileged true
  config.vm.provision :shell, path: "k8s-bootstrap.sh"

  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    set -e -x -u
    sudo apt-get update
    sudo apt-get install -y vim git build-essential openvswitch-switch tcpdump
    # Install Golang
    wget --quiet https://storage.googleapis.com/golang/go1.9.1.linux-amd64.tar.gz
    sudo tar -zxf go1.9.1.linux-amd64.tar.gz -C /usr/local/
    echo 'export GOROOT=/usr/local/go' >> /home/ubuntu/.bashrc
    echo 'export GOPATH=$HOME/go' >> /home/ubuntu/.bashrc
    echo 'export PATH=$PATH:$GOROOT/bin:$GOPATH/bin' >> /home/ubuntu/.bashrc
    source /home/ubuntu/.bashrc
    mkdir -p /home/ubuntu/go/src
    rm -rf /home/ubuntu/go1.9.1.linux-amd64.tar.gz
    # Download CNI and CNI plugins binaries
    wget --quiet https://github.com/containernetworking/cni/releases/download/v0.6.0/cni-amd64-v0.6.0.tgz
    wget --quiet https://github.com/containernetworking/plugins/releases/download/v0.6.0/cni-plugins-amd64-v0.6.0.tgz
    sudo mkdir -p /opt/cni/bin
    sudo mkdir -p /etc/cni/net.d
    sudo tar -zxf cni-amd64-v0.6.0.tgz -C /opt/cni/bin
    sudo tar -zxf cni-plugins-amd64-v0.6.0.tgz -C /opt/cni/bin
    rm -rf /home/ubuntu/cni-plugins-amd64-v0.6.0.tgz /home/ubuntu/cni-amd64-v0.6.0.tgz
    # Download ovs CNI source
    git clone https://github.com/John-Lin/ovs-cni
  SHELL
  
  config.vm.define "host1" do |host1|
    host1.vm.box = "ubuntu/xenial64"
    host1.vm.hostname = 'host1'
    
    host1.vm.network "public_network", bridge: "en0: Wi-Fi (AirPort)"

    host1.vm.provider :virtualbox do |v|
      v.customize ["modifyvm", :id, "--cpus", 2]
      v.customize ["modifyvm", :id, "--memory", 1024]
      v.customize ['modifyvm', :id, '--nicpromisc1', 'allow-all']
      v.customize ["modifyvm", :id, "--name", "host1"]
    end
  end

  config.vm.define "host2" do |host2|
    host2.vm.box = "ubuntu/xenial64"
    host2.vm.hostname = 'host2'

    host2.vm.network "public_network", bridge: "en0: Wi-Fi (AirPort)"
  
    host2.vm.provider :virtualbox do |v|
      v.customize ["modifyvm", :id, "--cpus", 2]
      v.customize ["modifyvm", :id, "--memory", 1024]
      v.customize ['modifyvm', :id, '--nicpromisc1', 'allow-all']
      v.customize ["modifyvm", :id, "--name", "host2"]
    end
  end
end
